name: Flyway Build Migrations


on:
  pull_request:
    branches:
      - dev
      - staging
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    
env:
  SQLFLUFF_DIALECT: postgres
  DB_NAME: postgres
  FLYWAY_URL: jdbc:postgresql://postgres:5432/postgres
  FLYWAY_USER: postgres
  FLYWAY_PASSWORD: postgres
  FLYWAY_SCHEMAS: public,climate_ctrl
  
jobs:
  Continuous-Integration-Build:
    name: Continuous Integration Build
    runs-on: ubuntu-20.04
    
    container:
      image: flyway/flyway:latest
      volumes:
        - .:/flyway/sql
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        # Provide the password for postgres
        env:
          POSTGRES_HOST: postgres
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ${{ env.DB_NAME }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Continuous Integration Flyway Clean Migrate
        run: |
          flyway migrate
          
      - name: Flyway Info
        run: |
          flyway info
          
      - name: Flyway Info Production
        env:
            FLYWAY_URL: ${{ secrets.PROD_DB_URL }}
            FLYWAY_USER: ${{ secrets.PROD_DB_USER }}
            FLYWAY_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
            FLYWAY_SCHEMAS: public,climate_ctrl
        run: |
          flyway info
          
      - name: Flyway Check
        env:
          FLYWAY_URL: ${{ secrets.PROD_DB_URL }}
          FLYWAY_USER: ${{ secrets.PROD_DB_USER }}
          FLYWAY_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          FLYWAY_SCHEMAS: public,climate_ctrl
        run: >-
          flyway check \
            -baselineOnMigrate=true -outOfOrder=true -connectRetries=10 \
            -check.buildUrl="jdbc:postgresql://postgres:5432/postgres" \
            -check.buildUser="postgres" \
            -check.buildPassword="postgres" \
            -reportFilename="/flyway/reports/report.html"
        
      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: Database Report
          path: reports/
        
