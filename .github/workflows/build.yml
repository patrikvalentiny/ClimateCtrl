name: SonarCloud
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    
env:
  DB_NAME: postgres
  FLYWAY_URL: jdbc:postgresql://postgres:5432/postgres
  FLYWAY_USER: postgres
  FLYWAY_PASSWORD: postgres
  FLYWAY_SCHEMAS: public,climate_ctrl
  
  


jobs:
  unit_test:
    name: Unit Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-incremental
      - name: Test
        env:
          ASPNETCORE_ConnectionStrings__Postgres: postgresql://${{ env.FLYWAY_USER }}:${{ env.FLYWAY_PASSWORD }}@localhost:5432/${{ env.DB_NAME }}
          ASPNETCORE_Flespi__Username: ${{ secrets.FLESPI_USERNAME }}
        run: |
          cd ./unittests
          dotnet test --no-build --verbosity normal
  build:
    name: Sonar Build and analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install SonarCloud scanner
#        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          dotnet tool install --global dotnet-sonarscanner 
          dotnet tool install --global dotnet-coverage 
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          dotnet-sonarscanner begin /k:"patrikvalentiny_ClimateCtrl" /o:"patrikvalentiny" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=unittests\coverage.xml
          dotnet build --no-incremental
          cd .\unittests
          dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          cd ..
          dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
          
  flyway_migration_build:
    name: Flyway Migration Build
    runs-on: ubuntu-20.04

    container:
      image: flyway/flyway:latest
      volumes:
        - .:/flyway/sql
    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres
        env:
          POSTGRES_HOST: postgres
          POSTGRES_USER: ${{ env.FLYWAY_USER }}
          POSTGRES_PASSWORD: ${{ env.FLYWAY_PASSWORD }}
          POSTGRES_DB: ${{ env.DB_NAME }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Continuous Integration Flyway Clean Migrate
        run: |
          flyway migrate

      - name: Flyway Info
        run: |
          flyway info

      - name: Flyway Info Production
        env:
          FLYWAY_URL: ${{ secrets.PROD_DB_URL }}
          FLYWAY_USER: ${{ secrets.PROD_DB_USER }}
          FLYWAY_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          FLYWAY_SCHEMAS: public, climate_ctrl
        run: |
          flyway info
